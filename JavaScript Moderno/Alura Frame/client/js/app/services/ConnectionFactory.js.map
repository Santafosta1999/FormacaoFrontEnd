{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AACXC,gB,GAAa,I;AACbC,W,GAAQ,I;;mCAECC,iB;AACX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CACsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;AACjCT,kCAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACD,eAFD;AAGAR,0BAAYS,SAAZ,GAAwB,aAAK;AAC3B,oBAAI,CAAChB,UAAL,EAAiB;AACfA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAY;AAC7B,0BAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AACD,eATD;AAUAO,0BAAYW,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAID,aApBM,CAAP;AAqBD;;;uCACmBtB,U,EAAY;AAC9BH,mBAAO0B,OAAP,CAAe,iBAAS;AACtB,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACE1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEF1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,aALD;AAMD;;;4CACwB;AACvB,gBAAI7B,UAAJ,EAAgB;AACdC;AACAD,2BAAa,IAAb;AACAmB,sBAAQC,GAAR,CAAY,8BAAZ;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["//Criar uma conexão com o IndexedDB\r\nconst stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n  constructor() {\r\n    throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n  }\r\n  static getConnection() {\r\n    return new Promise((resolve, reject) => {\r\n      let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n      openRequest.onupgradeneeded = e => {\r\n        ConnectionFactory._createStore(e.target.result);\r\n      };\r\n      openRequest.onsuccess = e => {\r\n        if (!connection) {\r\n          connection = e.target.result;\r\n          close = connection.close.bind(connection);\r\n          connection.close = function () {\r\n            throw new Error('Você não pode fechar diretamente a conexão.')\r\n          };\r\n        }\r\n        resolve(connection);\r\n      };\r\n      openRequest.onerror = e => {\r\n        console.log(e.target.error);\r\n        reject(e.target.error.name);\r\n      };\r\n    });\r\n  }\r\n  static _createStore(connection) {\r\n    stores.forEach(store => {\r\n      if (connection.objectStoreNames.contains(store))\r\n        connection.deleteObjectStore(store);\r\n\r\n      connection.createObjectStore(store, { autoIncrement: true });\r\n    });\r\n  }\r\n  static closeConnection() {\r\n    if (connection) {\r\n      close();\r\n      connection = null;\r\n      console.log('Conexão fechada com sucesso.');\r\n    }\r\n  }\r\n}"]}