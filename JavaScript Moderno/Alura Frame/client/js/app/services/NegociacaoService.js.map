{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","url","semana","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","periodos","reduce","dados","periodo","concat","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\r\nimport { ConnectionFactory } from './ConnectionFactory';\r\nimport { NegociacaoDao } from '../dao/NegociacaoDao';\r\nimport { Negociacao } from '../models/Negociacao';\r\n\r\n//Classe para obter irformações do aquivo JSON\r\nexport class NegociacaoService {\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n    obterNegociacoesDaSemana(url, semana = '') {\r\n        //Recebe o retorno de uma Promise e retorna ela novamente\r\n        return this._http\r\n            //Passar endereço do arquivo JSON\r\n            .get(url)\r\n            .then(negociacoes => {\r\n                /*Recebe as negociações do resolve\r\n                da Promisse, e para cada uma cria\r\n                uma negociação baseada no modelo e\r\n                faz o retorno do modelo*/\r\n                return negociacoes.map(objeto =>\r\n                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            //Trata os erros retornados pelo reject da Promisse\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error(`Não foi possível obter as negociações da semana ${semana}`);\r\n            });\r\n    }\r\n    //Junta todas as negociações obtidas e retorna uma Promisse completa\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(\r\n                'http://localhost:3000/negociacoes/semana'),\r\n            this.obterNegociacoesDaSemana(\r\n                'http://localhost:3000/negociacoes/anterior', ' anterior'),\r\n            this.obterNegociacoesDaSemana(\r\n                'http://localhost:3000/negociacoes/retrasada', 'retrasada') \r\n        ])\r\n        //Percorre os 3 arrays gerados nas semanas, concatena e retorna em 1 só array\r\n        .then(periodos => {\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n            return negociacoes;\r\n        })\r\n        //Tratamento de erros\r\n        .catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a Negociação');\r\n            });\r\n    }\r\n    lista() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as Negociações')\r\n            });\r\n    }\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as Negociações')\r\n            });\r\n    }\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        negociacao.isEquals(negociacaoExistente)\r\n                    ) \r\n                )\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar negociações para importar')\r\n            });\r\n    }\r\n}"]}